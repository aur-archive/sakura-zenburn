--- src/sakura.c	2012-04-30 17:09:01.000000000 +0200
+++ src/sakura.c.new	2012-08-19 18:09:55.999327683 +0200
@@ -56,24 +56,26 @@
 #define PALETTE_SIZE 16
 
 /* Color palettes. Color lists borrowed from gnome-terminal source (thanks! ;)) */
-const GdkColor tango_palette[PALETTE_SIZE] =
+/* Zenburn palette adapted from the original Zenburn by Jani Nurminen */
+
+const GdkColor zenburn_palette[PALETTE_SIZE] =
 {
-	{ 0, 0x2e2e, 0x3434, 0x3636 },
-	{ 0, 0xcccc, 0x0000, 0x0000 },
-	{ 0, 0x4e4e, 0x9a9a, 0x0606 },
-	{ 0, 0xc4c4, 0xa0a0, 0x0000 },
-	{ 0, 0x3434, 0x6565, 0xa4a4 },
-	{ 0, 0x7575, 0x5050, 0x7b7b },
-	{ 0, 0x0606, 0x9820, 0x9a9a },
-	{ 0, 0xd3d3, 0xd7d7, 0xcfcf },
-	{ 0, 0x5555, 0x5757, 0x5353 },
-	{ 0, 0xefef, 0x2929, 0x2929 },
-	{ 0, 0x8a8a, 0xe2e2, 0x3434 },
-	{ 0, 0xfcfc, 0xe9e9, 0x4f4f },
-	{ 0, 0x7272, 0x9f9f, 0xcfcf },
-	{ 0, 0xadad, 0x7f7f, 0xa8a8 },
-	{ 0, 0x3434, 0xe2e2, 0xe2e2 },
-	{ 0, 0xeeee, 0xeeee, 0xecec }
+	{ 0, 0x0000, 0x0000, 0x0000 },
+	{ 0, 0x7070, 0x5050, 0x5050 },
+	{ 0, 0x6060, 0xb4b4, 0x8a8a },
+	{ 0, 0xdfdf, 0xafaf, 0x8f8f },
+	{ 0, 0x5050, 0x6060, 0x7070 },
+	{ 0, 0xdcdc, 0x8c8c, 0xc3c3 },
+	{ 0, 0x8c8c, 0xd0d0, 0xd3d3 },
+	{ 0, 0xdcdc, 0xdcdc, 0xcccc },
+	{ 0, 0x7070, 0x9090, 0x8080 },
+	{ 0, 0xdcdc, 0xa3a3, 0xa3a3 },
+	{ 0, 0xc3c3, 0xbfbf, 0x9f9f },
+	{ 0, 0xf0f0, 0xdfdf, 0xafaf },
+	{ 0, 0x9494, 0xbfbf, 0xf3f3 },
+	{ 0, 0xecec, 0x9393, 0xd3d3 },
+	{ 0, 0x9393, 0xe0e0, 0xe3e3 },
+	{ 0, 0xffff, 0xffff, 0xffff }
 };
 
 const GdkColor linux_palette[PALETTE_SIZE] =
@@ -1395,8 +1397,8 @@
 	if (gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(widget))) {
 		if (strcmp(palette, "linux")==0) {
 			sakura.palette=linux_palette;
-		} else if (strcmp(palette, "tango")==0) {
-			sakura.palette=tango_palette;
+		} else if (strcmp(palette, "zenburn")==0) {
+			sakura.palette=zenburn_palette;
 		} else if (strcmp(palette, "xterm")==0) {
 			sakura.palette=xterm_palette;
 		} else {
@@ -1788,8 +1790,8 @@
 	cfgtmp = g_key_file_get_string(sakura.cfg, cfg_group, "palette", NULL);
 	if (strcmp(cfgtmp, "linux")==0) {
 		sakura.palette=linux_palette;
-	} else if (strcmp(cfgtmp, "tango")==0) {
-		sakura.palette=tango_palette;
+	} else if (strcmp(cfgtmp, "zenburn")==0) {
+		sakura.palette=zenburn_palette;
 	} else if (strcmp(cfgtmp, "xterm")==0) {
 		sakura.palette=xterm_palette;
 	} else {
@@ -1982,7 +1984,7 @@
 	          *item_opacity_menu, *item_show_first_tab, *item_audible_bell, *item_visible_bell,
 	          *item_blinking_cursor, *item_other_options, 
 			  *item_cursor, *item_cursor_block, *item_cursor_underline, *item_cursor_ibeam,
-	          *item_palette, *item_palette_tango, *item_palette_linux, *item_palette_xterm, *item_palette_rxvt,
+	          *item_palette, *item_palette_zenburn, *item_palette_linux, *item_palette_xterm, *item_palette_rxvt,
 	          *item_show_close_button, *item_tabs_on_bottom, *item_less_questions,
 		  *item_toggle_resize_grip;
 	GtkAction *action_open_link, *action_copy_link, *action_new_tab, *action_set_name, *action_close_tab,
@@ -2041,10 +2043,10 @@
 	item_cursor_underline=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_cursor_block), _("Underline"));
 	item_cursor_ibeam=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_cursor_block), _("IBeam"));
 	item_palette=gtk_menu_item_new_with_label(_("Set palette"));
-	item_palette_tango=gtk_radio_menu_item_new_with_label(NULL, "Tango");
-	item_palette_linux=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_tango), "Linux");
-	item_palette_xterm=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_tango), "xterm");
-	item_palette_rxvt=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_tango), "rxvt");
+	item_palette_zenburn=gtk_radio_menu_item_new_with_label(NULL, "Zenburn");
+	item_palette_linux=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_zenburn), "Linux");
+	item_palette_xterm=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_zenburn), "xterm");
+	item_palette_rxvt=gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item_palette_zenburn), "rxvt");
 	item_input_methods=gtk_menu_item_new_with_label(_("Input methods"));
 
 	/* Show defaults in menu items */
@@ -2114,8 +2116,8 @@
 	cfgtmp = g_key_file_get_string(sakura.cfg, cfg_group, "palette", NULL);
 	if (strcmp(cfgtmp, "linux")==0) {
 		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item_palette_linux), TRUE);
-	} else if (strcmp(cfgtmp, "tango")==0) {
-		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item_palette_tango), TRUE);
+	} else if (strcmp(cfgtmp, "zenburn")==0) {
+		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item_palette_zenburn), TRUE);
 	} else if (strcmp(cfgtmp, "xterm")==0) {
 		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item_palette_xterm), TRUE);
 	} else {
@@ -2172,7 +2174,7 @@
 	gtk_menu_shell_append(GTK_MENU_SHELL(cursor_menu), item_cursor_underline);
 	gtk_menu_shell_append(GTK_MENU_SHELL(cursor_menu), item_cursor_ibeam);
 	gtk_menu_shell_append(GTK_MENU_SHELL(other_options_menu), item_palette);
-	gtk_menu_shell_append(GTK_MENU_SHELL(palette_menu), item_palette_tango);
+	gtk_menu_shell_append(GTK_MENU_SHELL(palette_menu), item_palette_zenburn);
 	gtk_menu_shell_append(GTK_MENU_SHELL(palette_menu), item_palette_linux);
 	gtk_menu_shell_append(GTK_MENU_SHELL(palette_menu), item_palette_xterm);
 	gtk_menu_shell_append(GTK_MENU_SHELL(palette_menu), item_palette_rxvt);
@@ -2209,7 +2211,7 @@
 	g_signal_connect(G_OBJECT(item_cursor_block), "activate", G_CALLBACK(sakura_set_cursor), "block");
 	g_signal_connect(G_OBJECT(item_cursor_underline), "activate", G_CALLBACK(sakura_set_cursor), "underline");
 	g_signal_connect(G_OBJECT(item_cursor_ibeam), "activate", G_CALLBACK(sakura_set_cursor), "ibeam");
-	g_signal_connect(G_OBJECT(item_palette_tango), "activate", G_CALLBACK(sakura_set_palette), "tango");
+	g_signal_connect(G_OBJECT(item_palette_zenburn), "activate", G_CALLBACK(sakura_set_palette), "zenburn");
 	g_signal_connect(G_OBJECT(item_palette_linux), "activate", G_CALLBACK(sakura_set_palette), "linux");
 	g_signal_connect(G_OBJECT(item_palette_xterm), "activate", G_CALLBACK(sakura_set_palette), "xterm");
 	g_signal_connect(G_OBJECT(item_palette_rxvt), "activate", G_CALLBACK(sakura_set_palette), "rxvt");
